#data should all be positive integers or zero for Poisson models
if(any(object@y<0)){
errors<- c(errors, "Vector y constains non-positive values")
}
if(any(as.integer(object@y)!=object@y)){
errors <- c(errors, "Vector y constains non-integer values")
}
#test LL
if(logLik(object@y, object@MLE)!=object@LL){
errors<- c(errors, "logLik is invalid")
}
#test MLE
if(mle(object@y)!=object@MLE){
errors<- c(errors, "MLE is invalid")
}
#test SE
test <- object@SEtype == "basic" | object@SEtype == "bootstrap"
if(!test){
errors<- c(errors, "SEtype is invalid")
}
# if there are errors, return errors
if(length(errors) == 0) TRUE else errors
}
#' @rdname PoisMLE
#' @export
#set class definition and include validity check
setClass(Class="PoisMLE",
representation = representation(
y = "numeric",
MLE = "numeric",
LL = "numeric",
SE = "numeric",
SEtype = "character"
),
prototype = prototype(
y = numeric(),
MLE = numeric(),
LL = numeric(),
SE = numeric(),
SEtype = character()
),
validity= check_PoisMLE
)
#' @rdname PoisMLE
#' @export
#set method using validator
setMethod("initialize", "PoisMLE",
function(.Object, ...){
value = methods::callNextMethod()
return(value)
}
)
#' Plotting function for PoisMLE
#'
#' plots the MLE with a confidence interval of plus and minus 1.96 standard errors. Used for object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#' @param SEtype One of two methods of calculation; basic or bootstrap
#' @param B The number of bootstrapped resamplings if using SEtype="bootstrap". Default set to 1000.
#'
#' @return plot
#'  \item{plot}{A plot for PoisMLE that shows the MLE plus and minus 1.96 standard errors.}
#' @author Annie Jarman
#' @note This is used internally for the \code{estimatePois} function
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' plotMLE(y, "basic")
#' plotMLE(y, "bootstrap", 1000)
#' @seealso \code{\link{estimatePois}}
#' @seealso \code{\link{logLik}}
#' @seealso \code{\link{mle}}
#' @seealso \code{\link{standardError}}
#' @import ggplot2
#' @rdname plotMLE
#' @export
#set generic
setGeneric(name="plotMLE",
def=function(y, SEtype, B=1000)
{standardGeneric("plotMLE")}
)
#set method
setMethod(f="plotMLE",
definition=function(y, SEtype=c("basic", "bootstrap"), B){
#get mle
lambdaHat <- mle(y)
#get se
se <- standardError(y, SEtype, B)
#make sequence of lambdas around mle
lambdaSeq <- seq(lambdaHat - 2, lambdaHat + 2, by=0.1)
#take log likelihood of lambda sequence
likelihoods <- logLik(y, lambdaSeq)
#join these in df
df <- data.frame("x"=lambdaSeq, "y"=likelihoods)
#use ggplot2 to plot
plot <- ggplot2::ggplot()+
geom_point(aes(lambdaSeq, likelihoods), data=df) + #points for potential lambdas and their likelihood
geom_vline(aes(xintercept=lambdaHat, color="red"))+ #vertical line for MLE
geom_vline(aes(xintercept=lambdaHat + 1.96*se, color="grey")) + #vertical line for higher confidence interval
geom_vline(aes(xintercept=lambdaHat - 1.96*se, color="grey")) + #vertical line for lower confidence interval
labs(x="Lambda", y="Log Likelihood") +
theme_minimal()
return(plot)
}
)
#' MLE function
#'
#' Calculates the maximum likelihood estimator for lambda. Used for object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#'
#' @return Numeric value
#'  \item{MLE}{The maximum likelihood estimator for lamda}
#' @author Annie Jarman
#' @note This is used internally for the \code{estimatePois} function
#' @aliases MLE
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' mle(y)
#' @seealso \code{\link{estimatePois}}
#' @seealso \code{\link{logLik}}
#' @seealso \code{\link{standardError}}
#' @import methods
#' @import stats
#' @rdname mle
#' @export
#write mle function - dont need to use S4 (devtools lecture)
mle <- function(y){
n <- length(y)
MLE <- sum(y, na.rm=TRUE)/n
return(MLE)
}
#' Log likelihood function
#'
#' Calculates a log likelihood for the observed data. Used for object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#' @param lambda the assumed value of lambda
#'
#' @return Numeric value
#'  \item{LL}{The log likelihood for the observed data conditioned on the value of lamda}
#' @author Annie Jarman
#' @note This is used internally for the \code{estimatePois} function
#' @aliases logLikelihood
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' lambda <- mle(y)
#' logLik(y,lambda)
#' @seealso \code{\link{estimatePois}}
#' @seealso \code{\link{mle}}
#' @seealso \code{\link{standardError}}
#' @import methods
#' @import stats
#' @rdname logLik
#' @export
#write logLik function - dont need to use S4 (devtools lecture)
logLik <- function(y, lambda){
n <- length(y)
LL <- 1*n*lambda - sum(log(factorial(y))) + log(lambda)*sum(y)
return(LL)
}
#' estimate Poisson fitted model function
#'
#' Takes in data and returns an object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#' @param SEtype One of two methods of calculation; basic or bootstrap
#' @param B The number of bootstrapped resamplings if using SEtype="bootstrap". Default set to 1000.
#'
#' @return an object of class \code{PoisMLE} containing
#'  \item{y}{The original data of positive integers}
#'  \item{MLE}{The maximum likelihood estimator for this dataset}
#'  \item{LL}{The log likelihood calculated from the observed data assuming the MLE is correct}
#'  \item{SE}{The standard error. For SEtype="bootstrap", this is the standard deviation of bootstrapped MLEs.}
#'  \item{SEtype}{One of two methods - basic or bootstrap - used to calculate the standard error}
#' @author Annie Jarman
#' @aliases estimatePoisson
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' estimatePois(y, "basic)
#' estimatePois(y, "bootstrap", 1000)
#' @seealso \code{\link{standardError}}
#' @seealso \code{\link{logLik}}
#' @seealso \code{\link{mle}}
#' @rdname estimatePois
#' @export
#set generic
setGeneric(name = "estimatePois",
def=function(y,SEtype,B=1000)
{standardGeneric("estimatePois")}
)
#set method
#use internal functions to return PoisMLE class object
setMethod(f = "estimatePois",
definition = function(y,SEtype=c("basic","bootstrap"),B){
#use internal functions to fill slot outputs
return(methods::new("PoisMLE",
y=y,
MLE = mle(y),
LL = logLik(y, mle(y)),
SE = standardError(y, SEtype, B),
SEtype = SEtype))
}
)
library(roxygen2)
#load libraries
library(devtools)
library(roxygen2)
library(testthat)
#setwd
setwd("~/Documents/GitHub/PS3/Untitled/Exam/")
#can keep running this chunk with new updates to package
#load package
current.code <- as.package("poisMLE")
#loads all the functions
load_all(current.code)
#makes the help files
document(current.code)
#run the R checks
check(current.code)
#can keep running this chunk with new updates to package
#load package
current.code <- as.package("poisMLE")
#loads all the functions
load_all(current.code)
#makes the help files
document(current.code)
#run the R checks
check(current.code)
current.code <- as.package("poisMLE")
#loads all the functions
load_all(current.code)
#makes the help files
document(current.code)
#run the R checks
check(current.code)
#' Plotting function for PoisMLE
#'
#' plots the MLE with a confidence interval of plus and minus 1.96 standard errors. Used for object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#' @param SEtype One of two methods of calculation; basic or bootstrap
#' @param B The number of bootstrapped resamplings if using SEtype="bootstrap". Default set to 1000.
#'
#' @return plot
#'  \item{plot}{A plot for PoisMLE that shows the MLE plus and minus 1.96 standard errors.}
#' @author Annie Jarman
#' @note This is used internally for the \code{estimatePois} function
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' plotMLE(y, "basic")
#' plotMLE(y, "bootstrap", 1000)
#' @seealso \code{\link{estimatePois}}
#' @seealso \code{\link{logLik}}
#' @seealso \code{\link{mle}}
#' @seealso \code{\link{standardError}}
#' @rdname plotMLE
#' @import ggplot2
#' @export
#set generic
setGeneric(name="plotMLE",
def=function(y, SEtype, B=1000)
{standardGeneric("plotMLE")}
)
#set method
setMethod(f="plotMLE",
definition=function(y, SEtype=c("basic", "bootstrap"), B){
#get mle
lambdaHat <- mle(y)
#get se
se <- standardError(y, SEtype, B)
#make sequence of lambdas around mle
lambdaSeq <- seq(lambdaHat - 2, lambdaHat + 2, by=0.1)
#take log likelihood of lambda sequence
likelihoods <- logLik(y, lambdaSeq)
#join these in df
df <- data.frame("x"=lambdaSeq, "y"=likelihoods)
#use ggplot2 to plot
plot <- ggplot2::ggplot()+
geom_point(aes(lambdaSeq, likelihoods), data=df) + #points for potential lambdas and their likelihood
geom_vline(aes(xintercept=lambdaHat, color="red"))+ #vertical line for MLE
geom_vline(aes(xintercept=lambdaHat + 1.96*se, color="grey")) + #vertical line for higher confidence interval
geom_vline(aes(xintercept=lambdaHat - 1.96*se, color="grey")) + #vertical line for lower confidence interval
labs(x="Lambda", y="Log Likelihood") +
theme_minimal()
return(plot)
}
)
current.code <- as.package("poisMLE")
#loads all the functions
load_all(current.code)
#makes the help files
document(current.code)
#run the R checks
check(current.code)
#' Plotting function for PoisMLE
#'
#' plots the MLE with a confidence interval of plus and minus 1.96 standard errors. Used for object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#' @param SEtype One of two methods of calculation; basic or bootstrap
#' @param B The number of bootstrapped resamplings if using SEtype="bootstrap". Default set to 1000.
#'
#' @return plot
#'  \item{plot}{A plot for PoisMLE that shows the MLE plus and minus 1.96 standard errors.}
#' @author Annie Jarman
#' @note This is used internally for the \code{estimatePois} function
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' plotMLE(y, "basic")
#' plotMLE(y, "bootstrap", 1000)
#' @seealso \code{\link{estimatePois}}
#' @seealso \code{\link{logLik}}
#' @seealso \code{\link{mle}}
#' @seealso \code{\link{standardError}}
#' @rdname plotMLE
#' @import methods
#' @export
#set generic
setGeneric(name="plotMLE",
def=function(y, SEtype, B=1000)
{standardGeneric("plotMLE")}
)
#set method
setMethod(f="plotMLE",
definition=function(y, SEtype=c("basic", "bootstrap"), B){
#get mle
lambdaHat <- mle(y)
#get se
se <- standardError(y, SEtype, B)
#make sequence of lambdas around mle
lambdaSeq <- seq(lambdaHat - 2, lambdaHat + 2, by=0.1)
#take log likelihood of lambda sequence
likelihoods <- logLik(y, lambdaSeq)
#join these in df
df <- data.frame("x"=lambdaSeq, "y"=likelihoods)
#use ggplot2 to plot
plot <- ggplot2::ggplot()+
geom_point(aes(lambdaSeq, likelihoods), data=df) + #points for potential lambdas and their likelihood
geom_vline(aes(xintercept=lambdaHat, color="red"))+ #vertical line for MLE
geom_vline(aes(xintercept=lambdaHat + 1.96*se, color="grey")) + #vertical line for higher confidence interval
geom_vline(aes(xintercept=lambdaHat - 1.96*se, color="grey")) + #vertical line for lower confidence interval
labs(x="Lambda", y="Log Likelihood") +
theme_minimal()
return(plot)
}
)
current.code <- as.package("poisMLE")
#loads all the functions
load_all(current.code)
#makes the help files
document(current.code)
#run the R checks
check(current.code)
#' Plotting function for PoisMLE
#'
#' plots the MLE with a confidence interval of plus and minus 1.96 standard errors. Used for object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#' @param SEtype One of two methods of calculation; basic or bootstrap
#' @param B The number of bootstrapped resamplings if using SEtype="bootstrap". Default set to 1000.
#'
#' @return plot
#'  \item{plot}{A plot for PoisMLE that shows the MLE plus and minus 1.96 standard errors.}
#' @author Annie Jarman
#' @note This is used internally for the \code{estimatePois} function
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' plotMLE(y, "basic")
#' plotMLE(y, "bootstrap", 1000)
#' @seealso \code{\link{estimatePois}}
#' @seealso \code{\link{logLik}}
#' @seealso \code{\link{mle}}
#' @seealso \code{\link{standardError}}
#' @rdname plotMLE
#' @export
#set generic
setGeneric(name="plotMLE",
def=function(y, SEtype, B=1000)
{standardGeneric("plotMLE")}
)
#set method
setMethod(f="plotMLE",
definition=function(y, SEtype=c("basic", "bootstrap"), B){
#get mle
lambdaHat <- mle(y)
#get se
se <- standardError(y, SEtype, B)
#make sequence of lambdas around mle
lambdaSeq <- seq(lambdaHat - 2, lambdaHat + 2, by=0.1)
#take log likelihood of lambda sequence
likelihoods <- logLik(y, lambdaSeq)
#join these in df
df <- data.frame("x"=lambdaSeq, "y"=likelihoods)
#use ggplot2 to plot
plot <- ggplot2::ggplot()+
geom_point(aes(lambdaSeq, likelihoods), data=df) + #points for potential lambdas and their likelihood
geom_vline(aes(xintercept=lambdaHat, color="red"))+ #vertical line for MLE
geom_vline(aes(xintercept=lambdaHat + 1.96*se, color="grey")) + #vertical line for higher confidence interval
geom_vline(aes(xintercept=lambdaHat - 1.96*se, color="grey")) + #vertical line for lower confidence interval
labs(x="Lambda", y="Log Likelihood") +
theme_minimal()
return(plot)
}
)
current.code <- as.package("poisMLE")
#loads all the functions
load_all(current.code)
#makes the help files
document(current.code)
#run the R checks
check(current.code)
#run examples from functions to make sure they work
set.seed(1227)
y <- rpois(1227,130)
#test mle
lambda <- mle(y)
#test logLik
logLik(y,lambda)
#test both standard errors
standardError(y, "basic")
standardError(y, "bootstrap", 1000)
plotMLE(y, "basic")
#' Plotting function for PoisMLE
#'
#' plots the MLE with a confidence interval of plus and minus 1.96 standard errors. Used for object of class \code{PoisMLE}.
#'
#' @param y The vector of observed data
#' @param SEtype One of two methods of calculation; basic or bootstrap
#' @param B The number of bootstrapped resamplings if using SEtype="bootstrap". Default set to 1000.
#'
#' @return plot
#'  \item{plot}{A plot for PoisMLE that shows the MLE plus and minus 1.96 standard errors.}
#' @author Annie Jarman
#' @note This is used internally for the \code{estimatePois} function
#' @examples
#'
#' set.seed(1227)
#' y <- rpois(1227,130)
#' plotMLE(y, "basic")
#' plotMLE(y, "bootstrap", 1000)
#' @seealso \code{\link{estimatePois}}
#' @seealso \code{\link{logLik}}
#' @seealso \code{\link{mle}}
#' @seealso \code{\link{standardError}}
#' @rdname plotMLE
#' @export
#set generic
setGeneric(name="plotMLE",
def=function(y, SEtype, B=1000)
{standardGeneric("plotMLE")}
)
#set method
setMethod(f="plotMLE",
definition=function(y, SEtype=c("basic", "bootstrap"), B){
#get mle
lambdaHat <- mle(y)
#get se
se <- standardError(y, SEtype, B)
#make sequence of lambdas around mle
lambdaSeq <- seq(lambdaHat - 2, lambdaHat + 2, by=0.1)
#take log likelihood of lambda sequence
likelihoods <- logLik(y, lambdaSeq)
#use ggplot2 to plot
plot <- ggplot2::ggplot()+
geom_point(aes(lambdaSeq, likelihoods)) + #points for potential lambdas and their likelihood
geom_vline(aes(xintercept=lambdaHat, color="red"))+ #vertical line for MLE
geom_vline(aes(xintercept=lambdaHat + 1.96*se, color="grey")) + #vertical line for higher confidence interval
geom_vline(aes(xintercept=lambdaHat - 1.96*se, color="grey")) + #vertical line for lower confidence interval
labs(x="Lambda", y="Log Likelihood") +
theme_minimal()
return(plot)
}
)
current.code <- as.package("poisMLE")
#loads all the functions
load_all(current.code)
#makes the help files
document(current.code)
set.seed(1227)
y <- rpois(1227,130)
#test mle
lambda <- mle(y)
#test logLik
logLik(y,lambda)
#test both standard errors
standardError(y, "basic")
standardError(y, "bootstrap", 1000)
#test plot - plot doesn't work
plotMLE(y, "basic")
estimatePois(y, "basic")
estimatePois(y, "bootstrap")
#test help functions
?mle()
?logLik()
?standardError()
?estimatePois()
?PoisMLE
?plotMLE
